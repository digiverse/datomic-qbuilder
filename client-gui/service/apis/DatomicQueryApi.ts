/* tslint:disable */
/* eslint-disable */
/**
 * datomic-qbuilder-api
 * TODO...
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QueryApiRequest,
  QueryApiResponse,
  QueryBuilderModel,
  QueryModel,
  SaveQueryModel,
} from '../models';
import {
    QueryApiRequestFromJSON,
    QueryApiRequestToJSON,
    QueryApiResponseFromJSON,
    QueryApiResponseToJSON,
    QueryBuilderModelFromJSON,
    QueryBuilderModelToJSON,
    QueryModelFromJSON,
    QueryModelToJSON,
    SaveQueryModelFromJSON,
    SaveQueryModelToJSON,
} from '../models';

export interface ApiQueryFromBuilderModelPostRequest {
    queryBuilderModel: QueryBuilderModel;
}

export interface ApiQueryLoadNameGetRequest {
    name: string;
}

export interface ApiQueryPostRequest {
    queryApiRequest: QueryApiRequest;
}

export interface ApiQuerySavePostRequest {
    saveQueryModel: SaveQueryModel;
}

export interface ApiQueryToBuilderModelPostRequest {
    queryModel: QueryModel;
}

/**
 * 
 */
export class DatomicQueryApi extends runtime.BaseAPI {

    /**
     */
    async apiQueryFromBuilderModelPostRaw(requestParameters: ApiQueryFromBuilderModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryModel>> {
        if (requestParameters.queryBuilderModel === null || requestParameters.queryBuilderModel === undefined) {
            throw new runtime.RequiredError('queryBuilderModel','Required parameter requestParameters.queryBuilderModel was null or undefined when calling apiQueryFromBuilderModelPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/query/from-builder-model`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryBuilderModelToJSON(requestParameters.queryBuilderModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryModelFromJSON(jsonValue));
    }

    /**
     */
    async apiQueryFromBuilderModelPost(requestParameters: ApiQueryFromBuilderModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryModel> {
        const response = await this.apiQueryFromBuilderModelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQueryListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/query/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiQueryListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiQueryListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQueryLoadNameGetRaw(requestParameters: ApiQueryLoadNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryModel>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiQueryLoadNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/query/load/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryModelFromJSON(jsonValue));
    }

    /**
     */
    async apiQueryLoadNameGet(requestParameters: ApiQueryLoadNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryModel> {
        const response = await this.apiQueryLoadNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQueryPostRaw(requestParameters: ApiQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryApiResponse>> {
        if (requestParameters.queryApiRequest === null || requestParameters.queryApiRequest === undefined) {
            throw new runtime.RequiredError('queryApiRequest','Required parameter requestParameters.queryApiRequest was null or undefined when calling apiQueryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryApiRequestToJSON(requestParameters.queryApiRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQueryPost(requestParameters: ApiQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryApiResponse> {
        const response = await this.apiQueryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuerySavePostRaw(requestParameters: ApiQuerySavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.saveQueryModel === null || requestParameters.saveQueryModel === undefined) {
            throw new runtime.RequiredError('saveQueryModel','Required parameter requestParameters.saveQueryModel was null or undefined when calling apiQuerySavePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/query/save`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveQueryModelToJSON(requestParameters.saveQueryModel),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiQuerySavePost(requestParameters: ApiQuerySavePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiQuerySavePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQueryToBuilderModelPostRaw(requestParameters: ApiQueryToBuilderModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryBuilderModel>> {
        if (requestParameters.queryModel === null || requestParameters.queryModel === undefined) {
            throw new runtime.RequiredError('queryModel','Required parameter requestParameters.queryModel was null or undefined when calling apiQueryToBuilderModelPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/query/to-builder-model`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryModelToJSON(requestParameters.queryModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryBuilderModelFromJSON(jsonValue));
    }

    /**
     */
    async apiQueryToBuilderModelPost(requestParameters: ApiQueryToBuilderModelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryBuilderModel> {
        const response = await this.apiQueryToBuilderModelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
