/* tslint:disable */
/* eslint-disable */
/**
 * datomic-qbuilder-api
 * TODO...
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SortInstruction } from './SortInstruction';
import {
    SortInstructionFromJSON,
    SortInstructionFromJSONTyped,
    SortInstructionToJSON,
} from './SortInstruction';

/**
 * 
 * @export
 * @interface SaveQueryModel
 */
export interface SaveQueryModel {
    /**
     * 
     * @type {string}
     * @memberof SaveQueryModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SaveQueryModel
     */
    find: string;
    /**
     * 
     * @type {string}
     * @memberof SaveQueryModel
     */
    where: string;
    /**
     * 
     * @type {string}
     * @memberof SaveQueryModel
     */
    pull: string;
    /**
     * 
     * @type {Array<SortInstruction>}
     * @memberof SaveQueryModel
     */
    sortInstructions?: Array<SortInstruction>;
}

/**
 * Check if a given object implements the SaveQueryModel interface.
 */
export function instanceOfSaveQueryModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "find" in value;
    isInstance = isInstance && "where" in value;
    isInstance = isInstance && "pull" in value;

    return isInstance;
}

export function SaveQueryModelFromJSON(json: any): SaveQueryModel {
    return SaveQueryModelFromJSONTyped(json, false);
}

export function SaveQueryModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): SaveQueryModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'find': json['find'],
        'where': json['where'],
        'pull': json['pull'],
        'sortInstructions': !exists(json, 'sortInstructions') ? undefined : ((json['sortInstructions'] as Array<any>).map(SortInstructionFromJSON)),
    };
}

export function SaveQueryModelToJSON(value?: SaveQueryModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'find': value.find,
        'where': value.where,
        'pull': value.pull,
        'sortInstructions': value.sortInstructions === undefined ? undefined : ((value.sortInstructions as Array<any>).map(SortInstructionToJSON)),
    };
}

