/* tslint:disable */
/* eslint-disable */
/**
 * datomic-qbuilder-api
 * TODO...
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemaEntity } from './SchemaEntity';
import {
    SchemaEntityFromJSON,
    SchemaEntityFromJSONTyped,
    SchemaEntityToJSON,
} from './SchemaEntity';
import type { SchemaEnum } from './SchemaEnum';
import {
    SchemaEnumFromJSON,
    SchemaEnumFromJSONTyped,
    SchemaEnumToJSON,
} from './SchemaEnum';
import type { SchemaInterface } from './SchemaInterface';
import {
    SchemaInterfaceFromJSON,
    SchemaInterfaceFromJSONTyped,
    SchemaInterfaceToJSON,
} from './SchemaInterface';

/**
 * 
 * @export
 * @interface SchemaApiResponse
 */
export interface SchemaApiResponse {
    /**
     * 
     * @type {Array<SchemaEntity>}
     * @memberof SchemaApiResponse
     */
    entities: Array<SchemaEntity>;
    /**
     * 
     * @type {Array<SchemaInterface>}
     * @memberof SchemaApiResponse
     */
    interfaces?: Array<SchemaInterface>;
    /**
     * 
     * @type {Array<SchemaEnum>}
     * @memberof SchemaApiResponse
     */
    enums: Array<SchemaEnum>;
}

/**
 * Check if a given object implements the SchemaApiResponse interface.
 */
export function instanceOfSchemaApiResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entities" in value;
    isInstance = isInstance && "enums" in value;

    return isInstance;
}

export function SchemaApiResponseFromJSON(json: any): SchemaApiResponse {
    return SchemaApiResponseFromJSONTyped(json, false);
}

export function SchemaApiResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaApiResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entities': ((json['entities'] as Array<any>).map(SchemaEntityFromJSON)),
        'interfaces': !exists(json, 'interfaces') ? undefined : ((json['interfaces'] as Array<any>).map(SchemaInterfaceFromJSON)),
        'enums': ((json['enums'] as Array<any>).map(SchemaEnumFromJSON)),
    };
}

export function SchemaApiResponseToJSON(value?: SchemaApiResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entities': ((value.entities as Array<any>).map(SchemaEntityToJSON)),
        'interfaces': value.interfaces === undefined ? undefined : ((value.interfaces as Array<any>).map(SchemaInterfaceToJSON)),
        'enums': ((value.enums as Array<any>).map(SchemaEnumToJSON)),
    };
}

