/* tslint:disable */
/* eslint-disable */
/**
 * datomic-qbuilder-api
 * TODO...
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemaAttribute } from './SchemaAttribute';
import {
    SchemaAttributeFromJSON,
    SchemaAttributeFromJSONTyped,
    SchemaAttributeToJSON,
} from './SchemaAttribute';

/**
 * 
 * @export
 * @interface SchemaInterface
 */
export interface SchemaInterface {
    /**
     * 
     * @type {string}
     * @memberof SchemaInterface
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaInterface
     */
    doc?: string;
    /**
     * 
     * @type {Array<SchemaAttribute>}
     * @memberof SchemaInterface
     */
    attributes?: Array<SchemaAttribute>;
}

/**
 * Check if a given object implements the SchemaInterface interface.
 */
export function instanceOfSchemaInterface(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function SchemaInterfaceFromJSON(json: any): SchemaInterface {
    return SchemaInterfaceFromJSONTyped(json, false);
}

export function SchemaInterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaInterface {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'doc': !exists(json, 'doc') ? undefined : json['doc'],
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(SchemaAttributeFromJSON)),
    };
}

export function SchemaInterfaceToJSON(value?: SchemaInterface | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'doc': value.doc,
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(SchemaAttributeToJSON)),
    };
}

